<templateSet group="Jasmine">
  <template name="jasd" value="describe('$describe$', function() {&#10;    $END$&#10;});" description="Jasmine describe template" toReformat="true" toShortenFQNames="true">
    <variable name="describe" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasi" value="it('$should$', function() {&#10;    $END$&#10;});" description="Jasmine it template" toReformat="true" toShortenFQNames="true">
    <variable name="should" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasbi" value="beforeEach(inject(function(_$$rootScope_$other$){&#10;  $END$&#10;}));" description="beforeEach with Angular's inject" toReformat="true" toShortenFQNames="true">
    <variable name="other" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasbm" value="beforeEach(module($moduleName$));&#10;$END$" description="beforEach with AngularJS module" toReformat="false" toShortenFQNames="true">
    <variable name="moduleName" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasb" value="beforeEach(function(){&#10;  $END$&#10;});" description="beforeEach" toReformat="true" toShortenFQNames="true" />
  <template name="iit" value="it('$should$', inject(function($injectables$) {&#10;    $END$&#10;}));" description="Jasmine it template with injectables" toReformat="true" toShortenFQNames="true">
    <variable name="should" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="injectables" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasctrl" value="describe('$MyName$Ctrl', function() {&#10;  var $rootScope,&#10;      $scope,&#10;      controller;&#10;  beforeEach(function () {&#10;    module('$module$', _dependencies_);&#10;    &#10;    inject(function ($injector) {&#10;      $rootScope = $injector.get('$rootScope');&#10;      $scope = $rootScope.$new();&#10;      controller = $injector.get('$controller')('$MyName$Ctrl', {$scope. $scope});&#10;    });&#10;    &#10;  });&#10;&#10;  $END$&#10;&#10;});" description="Jasmine describe controller" toReformat="true" toShortenFQNames="true">
    <variable name="MyName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasdir" value="describe('$MyName$', function() {&#10;  var $rootScope,&#10;      $scope,&#10;      $compile,&#10;      el,&#10;      $body = $('body'),&#10;      simpleHtml = '$directiveHtml$';&#10;      &#10;  beforeEach(function () {&#10;    module('$module$', _dependencies_);&#10;    &#10;    inject(function ($injector) {&#10;      $rootScope = $injector.get('$rootScope');&#10;      $scope = $rootScope.$new();&#10;      $compile = $injector.get('$compile');&#10;      el = $compile(angular.element(simpleHtml))($scope);&#10;    });&#10;    &#10;    $body.append(el);&#10;    $rootScope.$digest();&#10;    &#10;  });&#10;   &#10;  $END$&#10;&#10;});" description="Jasmine describe directive" toReformat="true" toShortenFQNames="true">
    <variable name="MyName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="directiveHtml" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasf" value="describe('$MyFilterName$', function() {&#10;  var $filter, filter;&#10;  &#10;  beforeEach(function () {&#10;    module('$module$', _dependencies_);&#10;    &#10;    inject(function ($injector) {&#10;      $filter = $injector.get('$filter');&#10;      filter = $filter('$MyFilterName$');&#10;    });&#10;    &#10;  });&#10;&#10;  $END$&#10;&#10;});" description="Jasmine describe filter" toReformat="true" toShortenFQNames="true">
    <variable name="MyFilterName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jass" value="describe('$MyFactoryName$', function() {&#10;  var factory;&#10;  &#10;  beforeEach(function () {&#10;    module('$module$', _dependencies_);&#10;    &#10;    inject(function ($injector) {&#10;      factory = $injector.get('$MyFactoryName$');&#10;    });&#10;    &#10;  });&#10;&#10;  $END$&#10;&#10;});" description="Jasmine describe service" toReformat="true" toShortenFQNames="true">
    <variable name="MyFactoryName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="module" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectbe" value="expect($a$).toBe($b$);&#10;$END$" description="Expect(X).toBe(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotbe" value="expect($a$).not.toBe($b$);&#10;$END$" description="Expect(X).not.toBe(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectequal" value="expect($a$).toEqual($b$);&#10;$END$" description="Expect(X).toEqual(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectmatch" value="expect($a$).toMatch($b$);&#10;$END$" description="Expect(X).toMatch(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotmatch" value="expect($a$).not.toMatch($b$);&#10;$END$" description="Jasmine Expect(X).not.toMatch(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectdefined" value="expect($a$).toBeDefined();&#10;$END$" description="Expect(X).toBeDefined()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectundefined" value="expect($a$).toBeUndefined();&#10;$END$" description="Expect(X).toBeUndefined()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotundefined" value="expect($a$).not.toBeUndefined();&#10;$END$" description="Expect(X).toBeUndefined()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotdefined" value="expect($a$).not.toBeDefined();&#10;$END$" description="Jasmine expect().not.toBeDefined()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnull" value="expect($a$).toBeNull();&#10;$END$" description="Expect(X).toBeNull()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotnull" value="expect($a$).not.toBeNull();&#10;$END$" description="Expect(X).not.toBeNull()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expecttrue" value="expect($a$).toBeTruthy();&#10;$END$" description="Expect(X).toBeTruthy(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectfalse" value="expect($a$).toBeFalsy();&#10;$END$" description="Expect(X).toBeFalsy(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotfalse" value="expect($a$).not.toBeFalsy();&#10;$END$" description="Expect(X).not.toBeFalsy(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnottrue" value="expect($a$).not.toBeTruthy();&#10;$END$" description="Expect(X).not.toBeTruthy(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectcontain" value="expect($a$).toContain($b$);&#10;$END$" description="Expect(X).toContain(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotcontain" value="expect($a$).not.toContain($b$);&#10;$END$" description="Expect(X).not.toContain(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectlessthan" value="expect($a$).toBeLessThan($b$);&#10;$END$" description="Expect(X).toBeLessThan(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectgeaterthan" value="expect($a$).toBeGreaterThan($b$);&#10;$END$" description="Expect(X).toBeGreaterThan(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectcloseto" value="expect($a$).toBeCloseTo($closeValue$, $precision$);&#10;$END$" description="Expect(X).toBeCloseTo(Y, Z)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="closeValue" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="precision" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectthrow" value="expect($a$).toThrow();&#10;$END$" description="Expect(X).toThrow()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnotthrow" value="expect($a$).not.toThrow();&#10;$END$" description="Expect(X).not.toThrow()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="spyon" value="spyOn($objToSpy$, '$objAttribute$')&#10;$END$" description="spyOn(Obj, Key)" toReformat="false" toShortenFQNames="true">
    <variable name="objToSpy" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="objAttribute" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="spyonthrough" value="spyOn($objToSpy$, '$objAttribute$').andCallThrough()&#10;$END$" description="spyOn(Obj, Key).andCallThrough()" toReformat="false" toShortenFQNames="true">
    <variable name="objToSpy" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="objAttribute" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="spyonreturn" value="spyOn($objToSpy$, '$objAttribute$').andReturn($returnValue$)&#10;$END$" description="spyOn(Obj, Key).andReturn()" toReformat="false" toShortenFQNames="true">
    <variable name="objToSpy" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="objAttribute" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="returnValue" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="spyoncallfake" value="spyOn($objToSpy$, '$objAttribute$').andCallFake($function$)&#10;$END$" description="spyOn(Obj, Key).andCallFake(fct)" toReformat="false" toShortenFQNames="true">
    <variable name="objToSpy" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="objAttribute" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expecthavebeencalled" value="expect($a$).toHaveBeenCalled();&#10;$END$" description="Expect(X).toHaveBeenCalled()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expecthavebeencalledwith" value="expect($a$).toHaveBeenCalledWith($b$);&#10;$END$" description="Expect(X).toHaveBeenCalledWith(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="it" value="it('$should$', function() {&#10;    $END$&#10;});" description="Jasmine it template" toReformat="true" toShortenFQNames="true">
    <variable name="should" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="jasa" value="afterEach(function(){&#10;  $END$&#10;});" description="afterEach" toReformat="true" toShortenFQNames="true" />
  <template name="expecttypeof" value="expect(typeof $a$).toEqual('$b$');&#10;$END$" description="Expect(typeof X).toEqual(Y)" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectnumber" value="expect(typeof $a$).toEqual('number');&#10;$END$" description="Expect(typeof X).toEqual('number')" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectarray" value="expect($a$.length).toBeDefined();&#10;$END$" description="Expect(X.length).toBeDefined()" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectfunc" value="expect(typeof $a$).toEqual('function');&#10;$END$" description="Expect(typeof X).toEqual('function')" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectobj" value="expect(typeof $a$).toEqual('object');&#10;$END$" description="Expect(typeof X).toEqual('object')" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="expectstr" value="expect(typeof $a$).toEqual('string');&#10;$END$" description="Expect(typeof X).toEqual('string')" toReformat="true" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
</templateSet>